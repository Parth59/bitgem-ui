/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTGemPoolInterface extends ethers.utils.Interface {
  functions: {
    "addAllowedToken(address)": FunctionFragment;
    "addController(address)": FunctionFragment;
    "allTokenHashes(uint256)": FunctionFragment;
    "allTokenHashesLength()": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "allowedTokensLength()": FunctionFragment;
    "category()": FunctionFragment;
    "claimAmount(uint256)": FunctionFragment;
    "claimQuantity(uint256)": FunctionFragment;
    "claimTokenAmount(uint256)": FunctionFragment;
    "claimUnlockTime(uint256)": FunctionFragment;
    "claimedCount()": FunctionFragment;
    "collectClaim(uint256)": FunctionFragment;
    "createClaim(uint256)": FunctionFragment;
    "createClaims(uint256,uint256)": FunctionFragment;
    "createERC20Claim(address,uint256)": FunctionFragment;
    "createERC20Claims(address,uint256,uint256)": FunctionFragment;
    "difficultyStep()": FunctionFragment;
    "ethPrice()": FunctionFragment;
    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "maxClaims()": FunctionFragment;
    "maxTime()": FunctionFragment;
    "minTime()": FunctionFragment;
    "mintGenesisGems(address,address)": FunctionFragment;
    "mintedCount()": FunctionFragment;
    "name()": FunctionFragment;
    "nextClaimHash()": FunctionFragment;
    "nextClaimId()": FunctionFragment;
    "nextGemHash()": FunctionFragment;
    "nextGemId()": FunctionFragment;
    "relinquishControl()": FunctionFragment;
    "removeAllowedToken(address)": FunctionFragment;
    "rescue(address,uint256)": FunctionFragment;
    "setCategory(uint256)": FunctionFragment;
    "setFeeTracker(address)": FunctionFragment;
    "setGovernor(address)": FunctionFragment;
    "setMultiToken(address)": FunctionFragment;
    "setSwapHelper(address)": FunctionFragment;
    "setValidateErc20(bool)": FunctionFragment;
    "setVisible(bool)": FunctionFragment;
    "stakedToken(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenId(uint256)": FunctionFragment;
    "tokenType(uint256)": FunctionFragment;
    "totalStakedEth()": FunctionFragment;
    "validateErc20()": FunctionFragment;
    "visible()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenHashesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "category", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimQuantity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaims",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Claim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Claims",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "difficultyStep",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ethPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "maxClaims", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "minTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintGenesisGems",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextClaimHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextGemHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextGemId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relinquishControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTracker",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMultiToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapHelper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidateErc20",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setVisible", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateErc20",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "visible", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenHashesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "category", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Claim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Claims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "difficultyStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxClaims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGenesisGems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextGemHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextGemId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relinquishControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidateErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVisible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "visible", data: BytesLike): Result;

  events: {
    "ControllerAdded(address,address)": EventFragment;
    "ControllerRemoved(address,address)": EventFragment;
    "NFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NFTGemClaimRedeemed(address,address,uint256,uint256,uint256)": EventFragment;
    "NFTGemCreated(address,address,uint256,uint256,uint256)": EventFragment;
    "NFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "NFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemClaimRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemERC20ClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemERC20ClaimRedeemed"): EventFragment;
}

export class NFTGemPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTGemPoolInterface;

  functions: {
    addAllowedToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAllowedToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allTokenHashesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allTokenHashesLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allowedTokensLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    category(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { c: BigNumber }>;

    "category()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { c: BigNumber }>;

    claimAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimQuantity(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimQuantity(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimTokenAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimTokenAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimUnlockTime(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimUnlockTime(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimedCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    difficultyStep(overrides?: CallOverrides): Promise<[BigNumber]>;

    "difficultyStep()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ethPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    isTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxClaims(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxClaims()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mintedCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nextClaimHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextClaimId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextGemHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextGemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextGemId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    relinquishControl(overrides?: CallOverrides): Promise<[void]>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<[void]>;

    removeAllowedToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAllowedToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeTracker(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernor(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernor(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultiToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultiToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapHelper(
      helper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapHelper(address)"(
      helper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidateErc20(
      v: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidateErc20(bool)"(
      v: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVisible(
      visible: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakedToken(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakedToken(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    totalStakedEth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakedEth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    validateErc20(
      overrides?: CallOverrides
    ): Promise<[boolean] & { c: boolean }>;

    "validateErc20()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { c: boolean }>;

    visible(overrides?: CallOverrides): Promise<[boolean] & { v: boolean }>;

    "visible()"(overrides?: CallOverrides): Promise<[boolean] & { v: boolean }>;
  };

  addAllowedToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAllowedToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allTokenHashes(
    ndx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allTokenHashes(uint256)"(
    ndx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allTokenHashesLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allTokenHashesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowedTokens(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allowedTokens(uint256)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allowedTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  category(overrides?: CallOverrides): Promise<BigNumber>;

  "category()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimAmount(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimAmount(uint256)"(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimQuantity(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimQuantity(uint256)"(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimTokenAmount(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimTokenAmount(uint256)"(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimUnlockTime(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimUnlockTime(uint256)"(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

  "claimedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  collectClaim(
    claimHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectClaim(uint256)"(
    claimHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createClaim(
    timeframe: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createClaim(uint256)"(
    timeframe: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createClaims(
    timeframe: BigNumberish,
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createClaims(uint256,uint256)"(
    timeframe: BigNumberish,
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createERC20Claim(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createERC20Claim(address,uint256)"(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createERC20Claims(
    erc20token: string,
    tokenAmount: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createERC20Claims(address,uint256,uint256)"(
    erc20token: string,
    tokenAmount: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  difficultyStep(overrides?: CallOverrides): Promise<BigNumber>;

  "difficultyStep()"(overrides?: CallOverrides): Promise<BigNumber>;

  ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "ethPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    __symbol: string,
    __name: string,
    __ethPrice: BigNumberish,
    __minTime: BigNumberish,
    __maxTime: BigNumberish,
    __diffstep: BigNumberish,
    __maxClaims: BigNumberish,
    __allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
    __symbol: string,
    __name: string,
    __ethPrice: BigNumberish,
    __minTime: BigNumberish,
    __maxTime: BigNumberish,
    __diffstep: BigNumberish,
    __maxClaims: BigNumberish,
    __allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isController(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAllowed(token: string, overrides?: CallOverrides): Promise<boolean>;

  "isTokenAllowed(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxClaims(overrides?: CallOverrides): Promise<BigNumber>;

  "maxClaims()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTime(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minTime(overrides?: CallOverrides): Promise<BigNumber>;

  "minTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintGenesisGems(
    creator: string,
    funder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintGenesisGems(address,address)"(
    creator: string,
    funder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

  "mintedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextClaimHash(overrides?: CallOverrides): Promise<BigNumber>;

  "nextClaimHash()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextClaimId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextClaimId()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextGemHash(overrides?: CallOverrides): Promise<BigNumber>;

  "nextGemHash()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextGemId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextGemId()"(overrides?: CallOverrides): Promise<BigNumber>;

  relinquishControl(overrides?: CallOverrides): Promise<void>;

  "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

  removeAllowedToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAllowedToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rescue(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescue(address,uint256)"(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCategory(
    category: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCategory(uint256)"(
    category: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeTracker(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeTracker(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernor(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernor(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultiToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultiToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapHelper(
    helper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwapHelper(address)"(
    helper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidateErc20(
    v: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidateErc20(bool)"(
    v: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVisible(
    visible: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVisible(bool)"(
    visible: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakedToken(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "stakedToken(uint256)"(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenId(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenId(uint256)"(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenType(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "tokenType(uint256)"(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  totalStakedEth(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedEth()"(overrides?: CallOverrides): Promise<BigNumber>;

  validateErc20(overrides?: CallOverrides): Promise<boolean>;

  "validateErc20()"(overrides?: CallOverrides): Promise<boolean>;

  visible(overrides?: CallOverrides): Promise<boolean>;

  "visible()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addAllowedToken(token: string, overrides?: CallOverrides): Promise<void>;

    "addAllowedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokenHashesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allTokenHashesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    category(overrides?: CallOverrides): Promise<BigNumber>;

    "category()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimQuantity(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimQuantity(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokenAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimTokenAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnlockTime(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimUnlockTime(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    difficultyStep(overrides?: CallOverrides): Promise<BigNumber>;

    "difficultyStep()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "ethPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAllowed(token: string, overrides?: CallOverrides): Promise<boolean>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxClaims(overrides?: CallOverrides): Promise<BigNumber>;

    "maxClaims()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTime(overrides?: CallOverrides): Promise<BigNumber>;

    "minTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextClaimHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemId()"(overrides?: CallOverrides): Promise<BigNumber>;

    relinquishControl(overrides?: CallOverrides): Promise<void>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

    removeAllowedToken(token: string, overrides?: CallOverrides): Promise<void>;

    "removeAllowedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCategory(
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTracker(addr: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernor(addr: string, overrides?: CallOverrides): Promise<void>;

    "setGovernor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiToken(token: string, overrides?: CallOverrides): Promise<void>;

    "setMultiToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapHelper(helper: string, overrides?: CallOverrides): Promise<void>;

    "setSwapHelper(address)"(
      helper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidateErc20(v: boolean, overrides?: CallOverrides): Promise<void>;

    "setValidateErc20(bool)"(
      v: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVisible(visible: boolean, overrides?: CallOverrides): Promise<void>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedToken(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakedToken(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    totalStakedEth(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    validateErc20(overrides?: CallOverrides): Promise<boolean>;

    "validateErc20()"(overrides?: CallOverrides): Promise<boolean>;

    visible(overrides?: CallOverrides): Promise<boolean>;

    "visible()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    ControllerAdded(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    ControllerRemoved(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    NFTGemClaimCreated(
      account: null,
      pool: null,
      claimHash: null,
      length: null,
      quantity: null,
      amountPaid: null
    ): EventFilter;

    NFTGemClaimRedeemed(
      account: null,
      pool: null,
      claimHash: null,
      amountPaid: null,
      feeAssessed: null
    ): EventFilter;

    NFTGemCreated(
      account: null,
      pool: null,
      claimHash: null,
      gemHash: null,
      quantity: null
    ): EventFilter;

    NFTGemERC20ClaimCreated(
      account: null,
      pool: null,
      claimHash: null,
      length: null,
      token: null,
      quantity: null,
      conversionRate: null
    ): EventFilter;

    NFTGemERC20ClaimRedeemed(
      account: null,
      pool: null,
      claimHash: null,
      token: null,
      ethPrice: null,
      tokenAmount: null,
      feeAssessed: null
    ): EventFilter;
  };

  estimateGas: {
    addAllowedToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "addAllowedToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokenHashesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allTokenHashesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    category(overrides?: CallOverrides): Promise<BigNumber>;

    "category()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimQuantity(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimQuantity(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokenAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimTokenAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnlockTime(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimUnlockTime(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    difficultyStep(overrides?: CallOverrides): Promise<BigNumber>;

    "difficultyStep()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "ethPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxClaims(overrides?: CallOverrides): Promise<BigNumber>;

    "maxClaims()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTime(overrides?: CallOverrides): Promise<BigNumber>;

    "minTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemId()"(overrides?: CallOverrides): Promise<BigNumber>;

    relinquishControl(overrides?: CallOverrides): Promise<BigNumber>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAllowedToken(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAllowedToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeTracker(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernor(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setGovernor(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultiToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "setMultiToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapHelper(helper: string, overrides?: Overrides): Promise<BigNumber>;

    "setSwapHelper(address)"(
      helper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidateErc20(v: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setValidateErc20(bool)"(
      v: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVisible(visible: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakedToken(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedToken(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakedEth(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    validateErc20(overrides?: CallOverrides): Promise<BigNumber>;

    "validateErc20()"(overrides?: CallOverrides): Promise<BigNumber>;

    visible(overrides?: CallOverrides): Promise<BigNumber>;

    "visible()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowedToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAllowedToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allTokenHashesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allTokenHashesLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedTokensLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    category(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "category()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimQuantity(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimQuantity(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokenAmount(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimTokenAmount(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimUnlockTime(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimUnlockTime(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimedCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    difficultyStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "difficultyStep()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      __symbol: string,
      __name: string,
      __ethPrice: BigNumberish,
      __minTime: BigNumberish,
      __maxTime: BigNumberish,
      __diffstep: BigNumberish,
      __maxClaims: BigNumberish,
      __allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxClaims(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxClaims()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintedCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextClaimHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextClaimId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextGemHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextGemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextGemId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relinquishControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relinquishControl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAllowedToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeTracker(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernor(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernor(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultiToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultiToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapHelper(
      helper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapHelper(address)"(
      helper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidateErc20(
      v: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidateErc20(bool)"(
      v: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVisible(
      visible: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakedToken(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedToken(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakedEth()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validateErc20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    visible(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "visible()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
