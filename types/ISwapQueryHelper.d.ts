/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISwapQueryHelperInterface extends ethers.utils.Interface {
  functions: {
    "COIN()": FunctionFragment;
    "coinQuote(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPathForCoinToToken(address)": FunctionFragment;
    "getReserves(address)": FunctionFragment;
    "hasPool(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "COIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathForCoinToToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getReserves", values: [string]): string;
  encodeFunctionData(functionFragment: "hasPool", values: [string]): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;

  decodeFunctionResult(functionFragment: "COIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPathForCoinToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;

  events: {};
}

export class ISwapQueryHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISwapQueryHelperInterface;

  functions: {
    COIN(overrides?: CallOverrides): Promise<[string]>;

    "COIN()"(overrides?: CallOverrides): Promise<[string]>;

    coinQuote(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "coinQuote(address,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    "getPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    getPathForCoinToToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getPathForCoinToToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getReserves(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getReserves(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hasPool(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    "hasPool(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setFactory(f: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setFactory(address)"(
      f: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  COIN(overrides?: CallOverrides): Promise<string>;

  "COIN()"(overrides?: CallOverrides): Promise<string>;

  coinQuote(
    token: string,
    tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "coinQuote(address,uint256)"(
    token: string,
    tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getPair(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPair(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPathForCoinToToken(
    token: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getPathForCoinToToken(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getReserves(
    pair: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getReserves(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  hasPool(token: string, overrides?: CallOverrides): Promise<boolean>;

  "hasPool(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setFactory(f: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFactory(address)"(
    f: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    COIN(overrides?: CallOverrides): Promise<string>;

    "COIN()"(overrides?: CallOverrides): Promise<string>;

    coinQuote(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "coinQuote(address,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPathForCoinToToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getPathForCoinToToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getReserves(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getReserves(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hasPool(token: string, overrides?: CallOverrides): Promise<boolean>;

    "hasPool(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFactory(f: string, overrides?: CallOverrides): Promise<void>;

    "setFactory(address)"(f: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    COIN(overrides?: CallOverrides): Promise<BigNumber>;

    "COIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinQuote(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "coinQuote(address,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPathForCoinToToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPathForCoinToToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPool(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasPool(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFactory(f: string, overrides?: Overrides): Promise<BigNumber>;

    "setFactory(address)"(f: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "COIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinQuote(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "coinQuote(address,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPair(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPathForCoinToToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPathForCoinToToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserves(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPool(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPool(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFactory(f: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setFactory(address)"(
      f: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
