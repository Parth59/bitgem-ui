/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SwapQueryHelper } from "../SwapQueryHelper";

export class SwapQueryHelper__factory extends ContractFactory {
  constructor(
    linkLibraryAddresses: SwapQueryHelperLibraryAddresses,
    signer?: Signer
  ) {
    super(
      _abi,
      SwapQueryHelper__factory.linkBytecode(linkLibraryAddresses),
      signer
    );
  }

  static linkBytecode(
    linkLibraryAddresses: SwapQueryHelperLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$edf965422c4d699000d67e21efcd5710bc\\$__", "g"),
      linkLibraryAddresses["__$edf965422c4d699000d67e21efcd5710bc$__"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(overrides?: Overrides): Promise<SwapQueryHelper> {
    return super.deploy(overrides || {}) as Promise<SwapQueryHelper>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapQueryHelper {
    return super.attach(address) as SwapQueryHelper;
  }
  connect(signer: Signer): SwapQueryHelper__factory {
    return super.connect(signer) as SwapQueryHelper__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapQueryHelper {
    return new Contract(address, _abi, signerOrProvider) as SwapQueryHelper;
  }
}

const _abi = [
  {
    inputs: [],
    name: "COIN",
    outputs: [
      {
        internalType: "address",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "coinQuote",
    outputs: [
      {
        internalType: "uint256",
        name: "ethereum",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenReserve",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethReserve",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "fac",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getPathForCoinToToken",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "hasPool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "pairFor",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610927806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806396ed28f91161005b57806396ed28f9146101fa578063a54a72b71461025e578063c45a015514610266578063e6a439051461026e57610088565b8063096666961461008d5780631246dbf5146101105780633e99c1e414610157578063868d2d1e146101a3575b600080fd5b6100c0600480360360208110156100a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102a9565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100fc5781810151838201526020016100e4565b505050509050019250505060405180910390f35b6101436004803603602081101561012657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103fe565b604080519115158252519081900360200190f35b61018a6004803603602081101561016d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610497565b6040805192835260208301919091528051918290030190f35b6101dc600480360360408110156101b957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561053b565b60408051938452602084019290925282820152519081900360600190f35b6102356004803603604081101561021057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166105f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61023561072d565b6102356107a4565b6102356004803603604081101561028457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166107ea565b606073__$edf965422c4d699000d67e21efcd5710bc$__637dddfe9f836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561031057600080fd5b505af4158015610324573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561036b57600080fd5b810190808051604051939291908464010000000082111561038b57600080fd5b9083019060208201858111156103a057600080fd5b82518660208202830111640100000000821117156103bd57600080fd5b82525081516020918201928201910280838360005b838110156103ea5781810151838201526020016103d2565b505050509050016040525050509050919050565b600073__$edf965422c4d699000d67e21efcd5710bc$__631246dbf5836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561046557600080fd5b505af4158015610479573d6000803e3d6000fd5b505050506040513d602081101561048f57600080fd5b505192915050565b60008073__$edf965422c4d699000d67e21efcd5710bc$__633e99c1e4846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156104fe57600080fd5b505af4158015610512573d6000803e3d6000fd5b505050506040513d604081101561052857600080fd5b5080516020909101519094909350915050565b600080600073__$edf965422c4d699000d67e21efcd5710bc$__631874f0a986866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060606040518083038186803b1580156105ad57600080fd5b505af41580156105c1573d6000803e3d6000fd5b505050506040513d60608110156105d757600080fd5b50805160208201516040909201519097919650945092505050565b60008073__$edf965422c4d699000d67e21efcd5710bc$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561063957600080fd5b505af415801561064d573d6000803e3d6000fd5b505050506040513d602081101561066357600080fd5b5051604080517f6d91c0e200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152808816602483015286166044820152905191925073__$edf965422c4d699000d67e21efcd5710bc$__91636d91c0e291606480820192602092909190829003018186803b1580156106f957600080fd5b505af415801561070d573d6000803e3d6000fd5b505050506040513d602081101561072357600080fd5b5051949350505050565b600073__$edf965422c4d699000d67e21efcd5710bc$__63ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561077357600080fd5b505af4158015610787573d6000803e3d6000fd5b505050506040513d602081101561079d57600080fd5b5051919050565b600073__$edf965422c4d699000d67e21efcd5710bc$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561077357600080fd5b60008073__$edf965422c4d699000d67e21efcd5710bc$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561083157600080fd5b505af4158015610845573d6000803e3d6000fd5b505050506040513d602081101561085b57600080fd5b5051604080517f61e0b77f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152808816602483015286166044820152905191925073__$edf965422c4d699000d67e21efcd5710bc$__916361e0b77f91606480820192602092909190829003018186803b1580156106f957600080fdfea264697066735822122030b45b8ab89bd0f35dce38436cf91760d653deb3c59b8f76f3aee9be059f07ab64736f6c63430007030033";

export interface SwapQueryHelperLibraryAddresses {
  ["__$edf965422c4d699000d67e21efcd5710bc$__"]: string;
}
