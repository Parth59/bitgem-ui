/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { CreateCustomGemPoolProposalData } from "../CreateCustomGemPoolProposalData";

export class CreateCustomGemPoolProposalData__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _bytecode: BytesLike,
    _symbol: string,
    _name: string,
    overrides?: Overrides
  ): Promise<CreateCustomGemPoolProposalData> {
    return super.deploy(
      _bytecode,
      _symbol,
      _name,
      overrides || {}
    ) as Promise<CreateCustomGemPoolProposalData>;
  }
  getDeployTransaction(
    _bytecode: BytesLike,
    _symbol: string,
    _name: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _bytecode,
      _symbol,
      _name,
      overrides || {}
    );
  }
  attach(address: string): CreateCustomGemPoolProposalData {
    return super.attach(address) as CreateCustomGemPoolProposalData;
  }
  connect(signer: Signer): CreateCustomGemPoolProposalData__factory {
    return super.connect(signer) as CreateCustomGemPoolProposalData__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreateCustomGemPoolProposalData {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CreateCustomGemPoolProposalData;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106dd3803806106dd8339818101604052606081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156100ff57600080fd5b90830190602082018581111561011457600080fd5b825164010000000081118282018810171561012e57600080fd5b82525081516020918201929091019080838360005b8381101561015b578181015183820152602001610143565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156101ab57600080fd5b9083019060208201858111156101c057600080fd5b82516401000000008111828201881017156101da57600080fd5b82525081516020918201929091019080838360005b838110156102075781810151838201526020016101ef565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b506040525050835161024e9150600290602086019061027f565b50815161026290600090602085019061027f565b50805161027690600190602084019061027f565b50505050610312565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102c057805160ff19168380011785556102ed565b828001600101855582156102ed579182015b828111156102ed5782518255916020019190600101906102d2565b506102f99291506102fd565b5090565b5b808211156102f957600081556001016102fe565b6103bc806103216000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806373d4a13a14610030575b600080fd5b61003861017c565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561007d578181015183820152602001610065565b50505050905090810190601f1680156100aa5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156100dd5781810151838201526020016100c5565b50505050905090810190601f16801561010a5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561013d578181015183820152602001610125565b50505050905090810190601f16801561016a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6060806060600260006001828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021c5780601f106101f15761010080835404028352916020019161021c565b820191906000526020600020905b8154815290600101906020018083116101ff57829003601f168201915b5050855460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b5050845460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152959750869450925084019050828280156103745780601f1061034957610100808354040283529160200191610374565b820191906000526020600020905b81548152906001019060200180831161035757829003601f168201915b5050505050905092509250925090919256fea2646970667358221220065bbc16bd51cd094a5b55b111467346af91fa581fb2497c643de02d14930f6264736f6c63430007030033";
