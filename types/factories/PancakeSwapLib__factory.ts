/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PancakeSwapLib } from "../PancakeSwapLib";

export class PancakeSwapLib__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<PancakeSwapLib> {
    return super.deploy(overrides || {}) as Promise<PancakeSwapLib>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PancakeSwapLib {
    return super.attach(address) as PancakeSwapLib;
  }
  connect(signer: Signer): PancakeSwapLib__factory {
    return super.connect(signer) as PancakeSwapLib__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PancakeSwapLib {
    return new Contract(address, _abi, signerOrProvider) as PancakeSwapLib;
  }
}

const _abi = [
  {
    inputs: [],
    name: "COIN",
    outputs: [
      {
        internalType: "address",
        name: "wavax",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "PANCAKE_ROUTER_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "coinQuote",
    outputs: [
      {
        internalType: "uint256",
        name: "coin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenReserve",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "coinReserve",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "fac",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getPathForCoinToToken",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "hasPool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "pairFor",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610cf0610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806361e0b77f11610080578063868d2d1e11610065578063868d2d1e14610235578063a54a72b71461027f578063c45a015514610287576100ad565b806361e0b77f146101c55780636d91c0e2146101fd576100ad565b806309666696146100b25780631246dbf51461012857806328ac7c51146101625780633e99c1e414610186575b600080fd5b6100d8600480360360208110156100c857600080fd5b50356001600160a01b031661028f565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101145781810151838201526020016100fc565b505050509050019250505060405180910390f35b61014e6004803603602081101561013e57600080fd5b50356001600160a01b031661038c565b604080519115158252519081900360200190f35b61016a610518565b604080516001600160a01b039092168252519081900360200190f35b6101ac6004803603602081101561019c57600080fd5b50356001600160a01b0316610530565b6040805192835260208301919091528051918290030190f35b61016a600480360360608110156101db57600080fd5b506001600160a01b0381358116916020810135821691604090910135166105bb565b61016a6004803603606081101561021357600080fd5b506001600160a01b03813581169160208101358216916040909101351661071b565b6102616004803603604081101561024b57600080fd5b506001600160a01b0381351690602001356107f3565b60408051938452602084019290925282820152519081900360600190f35b61016a610a2c565b61016a610aac565b604080516002808252606082810190935273bcfccbde45ce874adcb698cc183debcf1795281291839181602001602082028036833701905050905083816000815181106102d857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561033157600080fd5b505afa158015610345573d6000803e3d6000fd5b505050506040513d602081101561035b57600080fd5b505181518290600190811061036c57fe5b6001600160a01b0390921660209283029190910190910152915050919050565b60008073bcfccbde45ce874adcb698cc183debcf1795281290506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e157600080fd5b505afa1580156103f5573d6000803e3d6000fd5b505050506040513d602081101561040b57600080fd5b5051604080516315ab88c960e31b815290519192506000916001600160a01b0385169163ad5c4648916004808301926020929190829003018186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d602081101561047d57600080fd5b50516040805163e6a4390560e01b81526001600160a01b038881166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b50516001600160a01b031615159695505050505050565b73bcfccbde45ce874adcb698cc183debcf1795281281565b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d606081101561059657600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169591169350915050565b60006001600160a01b038416610618576040805162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0383161580159061063857506001600160a01b03821615155b610689576040805162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b836001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156106e757600080fd5b505afa1580156106fb573d6000803e3d6000fd5b505050506040513d602081101561071157600080fd5b5051949350505050565b600080600061072a8585610afb565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527fd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60008060008073bcfccbde45ce874adcb698cc183debcf1795281290506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d602081101561087557600080fd5b5051604080516315ab88c960e31b815290519192506000916001600160a01b0385169163ad5c4648916004808301926020929190829003018186803b1580156108bd57600080fd5b505afa1580156108d1573d6000803e3d6000fd5b505050506040513d60208110156108e757600080fd5b50516040805163e6a4390560e01b81526001600160a01b038b81166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d602081101561096b57600080fd5b5051604080517f0902f1ac00000000000000000000000000000000000000000000000000000000815290519192506001600160a01b03831691630902f1ac91600480820192606092909190829003018186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d60608110156109f457600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169750169450610a1f888787610bef565b9650505050509250925092565b600073bcfccbde45ce874adcb698cc183debcf179528126001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7b57600080fd5b505afa158015610a8f573d6000803e3d6000fd5b505050506040513d6020811015610aa557600080fd5b5051919050565b600073bcfccbde45ce874adcb698cc183debcf179528126001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7b57600080fd5b600080826001600160a01b0316846001600160a01b03161415610b65576040805162461bcd60e51b815260206004820152601a60248201527f50726963653a204944454e544943414c5f414444524553534553000000000000604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610b85578284610b88565b83835b90925090506001600160a01b038216610be8576040805162461bcd60e51b815260206004820152601360248201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000808411610c45576040805162461bcd60e51b815260206004820152600c60248201527f50726963653a2050726963650000000000000000000000000000000000000000604482015290519081900360640190fd5b600083118015610c555750600082115b610ca6576040805162461bcd60e51b815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610cb157fe5b0494935050505056fea2646970667358221220fcfba01baf9d940452abe300d675a2ae80b1e586a5d2090dd9dfb715e4c8b9c764736f6c63430007030033";
