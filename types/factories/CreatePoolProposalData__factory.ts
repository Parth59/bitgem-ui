/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { CreatePoolProposalData } from "../CreatePoolProposalData";

export class CreatePoolProposalData__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _symbol: string,
    _name: string,
    _ethPrice: BigNumberish,
    _minTIme: BigNumberish,
    _maxTime: BigNumberish,
    _diffStep: BigNumberish,
    _maxCLaim: BigNumberish,
    _allowedToken: string,
    overrides?: Overrides
  ): Promise<CreatePoolProposalData> {
    return super.deploy(
      _symbol,
      _name,
      _ethPrice,
      _minTIme,
      _maxTime,
      _diffStep,
      _maxCLaim,
      _allowedToken,
      overrides || {}
    ) as Promise<CreatePoolProposalData>;
  }
  getDeployTransaction(
    _symbol: string,
    _name: string,
    _ethPrice: BigNumberish,
    _minTIme: BigNumberish,
    _maxTime: BigNumberish,
    _diffStep: BigNumberish,
    _maxCLaim: BigNumberish,
    _allowedToken: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _symbol,
      _name,
      _ethPrice,
      _minTIme,
      _maxTime,
      _diffStep,
      _maxCLaim,
      _allowedToken,
      overrides || {}
    );
  }
  attach(address: string): CreatePoolProposalData {
    return super.attach(address) as CreatePoolProposalData;
  }
  connect(signer: Signer): CreatePoolProposalData__factory {
    return super.connect(signer) as CreatePoolProposalData__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreatePoolProposalData {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CreatePoolProposalData;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_ethPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minTIme",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_diffStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxCLaim",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_allowedToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105d33803806105d3833981810160405261010081101561003457600080fd5b810190808051604051939291908464010000000082111561005457600080fd5b90830190602082018581111561006957600080fd5b825164010000000081118282018810171561008357600080fd5b82525081516020918201929091019080838360005b838110156100b0578181015183820152602001610098565b50505050905090810190601f1680156100dd5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010057600080fd5b90830190602082018581111561011557600080fd5b825164010000000081118282018810171561012f57600080fd5b82525081516020918201929091019080838360005b8381101561015c578181015183820152602001610144565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608085015160a086015160c0909601518a519598509296509094909390926101cb916000918b019061021f565b5086516101df9060019060208a019061021f565b50600295909555600393909355600491909155600555600655600780546001600160a01b0319166001600160a01b03909216919091179055506102b29050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061026057805160ff191683800117855561028d565b8280016001018555821561028d579182015b8281111561028d578251825591602001919060010190610272565b5061029992915061029d565b5090565b5b80821115610299576000815560010161029e565b610312806102c16000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806373d4a13a14610030575b600080fd5b610038610156565b6040518080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156101135781810151838201526020016100fb565b50505050905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b60608060008060008060008060006001600254600354600454600554600654600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50508a5460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959d508c9450925084019050828280156102bb5780601f10610290576101008083540402835291602001916102bb565b820191906000526020600020905b81548152906001019060200180831161029e57829003601f168201915b5050505050965097509750975097509750975097509750909192939495969756fea26469706673582212206e1d8ca1493bc1ec42a7b8bcaa31343351ffdcece67af5b823d69f9d8f93ca9964736f6c63430007030033";
