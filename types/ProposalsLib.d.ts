/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import { Contract, ContractTransaction } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProposalsLibInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "AllowList(address,address,address,bool)": EventFragment;
    "FeeUpdated(address,address,uint256)": EventFragment;
    "GovernanceTokenIssued(address,uint256)": EventFragment;
    "ProjectFunded(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTokenIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectFunded"): EventFragment;
}

export class ProposalsLib extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProposalsLibInterface;

  functions: {};

  callStatic: {};

  filters: {
    AllowList(
      proposal: string | null,
      pool: string | null,
      token: string | null,
      isBanned: null
    ): EventFilter;

    FeeUpdated(
      proposal: string | null,
      token: string | null,
      newFee: null
    ): EventFilter;

    GovernanceTokenIssued(receiver: string | null, amount: null): EventFilter;

    ProjectFunded(
      proposal: string | null,
      receiver: string | null,
      received: null
    ): EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
