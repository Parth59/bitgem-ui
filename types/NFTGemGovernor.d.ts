/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTGemGovernorInterface extends ethers.utils.Interface {
  functions: {
    "addController(address)": FunctionFragment;
    "createChangeFeeProposal(address,string,address,address,uint256)": FunctionFragment;
    "createFundProjectProposal(address,string,address,string,uint256)": FunctionFragment;
    "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "createProposalVoteTokens(uint256)": FunctionFragment;
    "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "createUpdateAllowlistProposal(address,string,address,address,bool)": FunctionFragment;
    "destroyProposalVoteTokens(uint256)": FunctionFragment;
    "executeProposal(address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isController(address)": FunctionFragment;
    "issueFuelToken(address,uint256)": FunctionFragment;
    "issueInitialGovernanceTokens(address)": FunctionFragment;
    "maybeIssueGovernanceToken(address)": FunctionFragment;
    "relinquishControl()": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setFeeTracker(address)": FunctionFragment;
    "setMultitoken(address)": FunctionFragment;
    "setProposalFactory(address)": FunctionFragment;
    "setSwapHelper(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createChangeFeeProposal",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createFundProjectProposal",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPoolProposal",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposalVoteTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSystemPool",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createUpdateAllowlistProposal",
    values: [string, string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyProposalVoteTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueFuelToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueInitialGovernanceTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maybeIssueGovernanceToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "relinquishControl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeTracker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultitoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapHelper",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChangeFeeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundProjectProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPoolProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposalVoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSystemPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUpdateAllowlistProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyProposalVoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueFuelToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueInitialGovernanceTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maybeIssueGovernanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relinquishControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultitoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapHelper",
    data: BytesLike
  ): Result;

  events: {
    "AllowList(address,address,bool)": EventFragment;
    "ControllerAdded(address,address)": EventFragment;
    "ControllerRemoved(address,address)": EventFragment;
    "FeeUpdated(address,address,uint256)": EventFragment;
    "GovernanceTokenIssued(address,uint256)": EventFragment;
    "ProjectFunded(address,address,uint256)": EventFragment;
    "StakingPoolCreated(address,address,string,string,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTokenIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPoolCreated"): EventFragment;
}

export class NFTGemGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTGemGovernorInterface;

  functions: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createChangeFeeProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createChangeFeeProposal(address,string,address,address,uint256)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createFundProjectProposal(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createFundProjectProposal(address,string,address,string,uint256)"(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createNewPoolProposal(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createSystemPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createUpdateAllowlistProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createUpdateAllowlistProposal(address,string,address,address,bool)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    destroyProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "destroyProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeProposal(
      propAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeProposal(address)"(
      propAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    "initialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    issueFuelToken(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issueFuelToken(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    issueInitialGovernanceTokens(
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issueInitialGovernanceTokens(address)"(
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maybeIssueGovernanceToken(
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "maybeIssueGovernanceToken(address)"(
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    relinquishControl(overrides?: CallOverrides): Promise<[void]>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<[void]>;

    setFactory(a: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setFactory(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeTracker(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTracker(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultitoken(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultitoken(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProposalFactory(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProposalFactory(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapHelper(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapHelper(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createChangeFeeProposal(
    submitter: string,
    title: string,
    token: string,
    pool: string,
    feeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createChangeFeeProposal(address,string,address,address,uint256)"(
    submitter: string,
    title: string,
    token: string,
    pool: string,
    feeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createFundProjectProposal(
    submitter: string,
    title: string,
    receiver: string,
    descriptionUrl: string,
    ethAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createFundProjectProposal(address,string,address,string,uint256)"(
    submitter: string,
    title: string,
    receiver: string,
    descriptionUrl: string,
    ethAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createNewPoolProposal(
    submitter: string,
    title: string,
    symbol: string,
    name: string,
    ethPrice: BigNumberish,
    minTIme: BigNumberish,
    maxTime: BigNumberish,
    diffStep: BigNumberish,
    maxClaims: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)"(
    submitter: string,
    title: string,
    symbol: string,
    name: string,
    ethPrice: BigNumberish,
    minTIme: BigNumberish,
    maxTime: BigNumberish,
    diffStep: BigNumberish,
    maxClaims: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPool(
    symbol: string,
    name: string,
    ethPrice: BigNumberish,
    minTime: BigNumberish,
    maxTime: BigNumberish,
    diffstep: BigNumberish,
    maxClaims: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
    symbol: string,
    name: string,
    ethPrice: BigNumberish,
    minTime: BigNumberish,
    maxTime: BigNumberish,
    diffstep: BigNumberish,
    maxClaims: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createProposalVoteTokens(
    proposalHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createProposalVoteTokens(uint256)"(
    proposalHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createSystemPool(
    symbol: string,
    name: string,
    ethPrice: BigNumberish,
    minTime: BigNumberish,
    maxTime: BigNumberish,
    diffstep: BigNumberish,
    maxClaims: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
    symbol: string,
    name: string,
    ethPrice: BigNumberish,
    minTime: BigNumberish,
    maxTime: BigNumberish,
    diffstep: BigNumberish,
    maxClaims: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createUpdateAllowlistProposal(
    submitter: string,
    title: string,
    token: string,
    pool: string,
    newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createUpdateAllowlistProposal(address,string,address,address,bool)"(
    submitter: string,
    title: string,
    token: string,
    pool: string,
    newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  destroyProposalVoteTokens(
    proposalHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "destroyProposalVoteTokens(uint256)"(
    proposalHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeProposal(
    propAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeProposal(address)"(
    propAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _multitoken: string,
    _factory: string,
    _feeTracker: string,
    _proposalFactory: string,
    _swapHelper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _multitoken: string,
    _factory: string,
    _feeTracker: string,
    _proposalFactory: string,
    _swapHelper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isController(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueFuelToken(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issueFuelToken(address,uint256)"(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  issueInitialGovernanceTokens(
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issueInitialGovernanceTokens(address)"(
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maybeIssueGovernanceToken(
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "maybeIssueGovernanceToken(address)"(
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  relinquishControl(overrides?: CallOverrides): Promise<void>;

  "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

  setFactory(a: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFactory(address)"(
    a: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeTracker(a: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFeeTracker(address)"(
    a: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultitoken(a: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setMultitoken(address)"(
    a: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProposalFactory(
    a: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProposalFactory(address)"(
    a: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapHelper(a: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setSwapHelper(address)"(
    a: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createChangeFeeProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createChangeFeeProposal(address,string,address,address,uint256)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createFundProjectProposal(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createFundProjectProposal(address,string,address,string,uint256)"(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createNewPoolProposal(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSystemPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createUpdateAllowlistProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "createUpdateAllowlistProposal(address,string,address,address,bool)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    destroyProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "destroyProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposal(
      propAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeProposal(address)"(
      propAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueFuelToken(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "issueFuelToken(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueInitialGovernanceTokens(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "issueInitialGovernanceTokens(address)"(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maybeIssueGovernanceToken(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maybeIssueGovernanceToken(address)"(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relinquishControl(overrides?: CallOverrides): Promise<void>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

    setFactory(a: string, overrides?: CallOverrides): Promise<void>;

    "setFactory(address)"(a: string, overrides?: CallOverrides): Promise<void>;

    setFeeTracker(a: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTracker(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultitoken(a: string, overrides?: CallOverrides): Promise<void>;

    "setMultitoken(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalFactory(a: string, overrides?: CallOverrides): Promise<void>;

    "setProposalFactory(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapHelper(a: string, overrides?: CallOverrides): Promise<void>;

    "setSwapHelper(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AllowList(
      proposal: string | null,
      token: string | null,
      isBanned: null
    ): EventFilter;

    ControllerAdded(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    ControllerRemoved(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    FeeUpdated(
      proposal: string | null,
      token: string | null,
      newFee: null
    ): EventFilter;

    GovernanceTokenIssued(receiver: string | null, amount: null): EventFilter;

    ProjectFunded(
      proposal: string | null,
      receiver: string | null,
      received: null
    ): EventFilter;

    StakingPoolCreated(
      proposal: string | null,
      pool: string | null,
      symbol: null,
      name: null,
      ethPrice: null,
      minTime: null,
      maxTime: null,
      diffStep: null,
      maxClaims: null,
      alllowedToken: null
    ): EventFilter;
  };

  estimateGas: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createChangeFeeProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createChangeFeeProposal(address,string,address,address,uint256)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createFundProjectProposal(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createFundProjectProposal(address,string,address,string,uint256)"(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createNewPoolProposal(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createSystemPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createUpdateAllowlistProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createUpdateAllowlistProposal(address,string,address,address,bool)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    destroyProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "destroyProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeProposal(
      propAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeProposal(address)"(
      propAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueFuelToken(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issueFuelToken(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    issueInitialGovernanceTokens(
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issueInitialGovernanceTokens(address)"(
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maybeIssueGovernanceToken(
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "maybeIssueGovernanceToken(address)"(
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    relinquishControl(overrides?: CallOverrides): Promise<BigNumber>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(a: string, overrides?: Overrides): Promise<BigNumber>;

    "setFactory(address)"(a: string, overrides?: Overrides): Promise<BigNumber>;

    setFeeTracker(a: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTracker(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultitoken(a: string, overrides?: Overrides): Promise<BigNumber>;

    "setMultitoken(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProposalFactory(a: string, overrides?: Overrides): Promise<BigNumber>;

    "setProposalFactory(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapHelper(a: string, overrides?: Overrides): Promise<BigNumber>;

    "setSwapHelper(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createChangeFeeProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createChangeFeeProposal(address,string,address,address,uint256)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      feeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createFundProjectProposal(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createFundProjectProposal(address,string,address,string,uint256)"(
      submitter: string,
      title: string,
      receiver: string,
      descriptionUrl: string,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createNewPoolProposal(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      submitter: string,
      title: string,
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTIme: BigNumberish,
      maxTime: BigNumberish,
      diffStep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createSystemPool(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      symbol: string,
      name: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxClaims: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createUpdateAllowlistProposal(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createUpdateAllowlistProposal(address,string,address,address,bool)"(
      submitter: string,
      title: string,
      token: string,
      pool: string,
      newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    destroyProposalVoteTokens(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "destroyProposalVoteTokens(uint256)"(
      proposalHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeProposal(
      propAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeProposal(address)"(
      propAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _multitoken: string,
      _factory: string,
      _feeTracker: string,
      _proposalFactory: string,
      _swapHelper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueFuelToken(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issueFuelToken(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    issueInitialGovernanceTokens(
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issueInitialGovernanceTokens(address)"(
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maybeIssueGovernanceToken(
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "maybeIssueGovernanceToken(address)"(
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    relinquishControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relinquishControl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFactory(a: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setFactory(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeTracker(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTracker(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultitoken(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultitoken(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProposalFactory(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProposalFactory(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapHelper(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapHelper(address)"(
      a: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
