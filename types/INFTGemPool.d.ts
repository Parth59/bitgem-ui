/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface INFTGemPoolInterface extends ethers.utils.Interface {
  functions: {
    "category()": FunctionFragment;
    "collectClaim(uint256)": FunctionFragment;
    "createClaim(uint256)": FunctionFragment;
    "createClaims(uint256,uint256)": FunctionFragment;
    "createERC20Claim(address,uint256)": FunctionFragment;
    "createERC20Claims(address,uint256,uint256)": FunctionFragment;
    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "mintGenesisGems(address,address)": FunctionFragment;
    "rescue(address,uint256)": FunctionFragment;
    "setCategory(uint256)": FunctionFragment;
    "setFeeTracker(address)": FunctionFragment;
    "setGovernor(address)": FunctionFragment;
    "setMultiToken(address)": FunctionFragment;
    "setSwapHelper(address)": FunctionFragment;
    "setValidateErc20(bool)": FunctionFragment;
    "setVisible(bool)": FunctionFragment;
    "validateErc20()": FunctionFragment;
    "visible()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "category", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaims",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Claim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Claims",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGenesisGems",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTracker",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMultiToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapHelper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidateErc20",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setVisible", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "validateErc20",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "visible", values?: undefined): string;

  decodeFunctionResult(functionFragment: "category", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Claim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Claims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGenesisGems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidateErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVisible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "visible", data: BytesLike): Result;

  events: {
    "NFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NFTGemClaimRedeemed(address,address,uint256,uint256,uint256)": EventFragment;
    "NFTGemCreated(address,address,uint256,uint256,uint256)": EventFragment;
    "NFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "NFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTGemClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemClaimRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemERC20ClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemERC20ClaimRedeemed"): EventFragment;
}

export class INFTGemPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: INFTGemPoolInterface;

  functions: {
    category(overrides?: CallOverrides): Promise<[BigNumber]>;

    "category()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeTracker(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernor(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernor(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultiToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultiToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapHelper(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapHelper(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidateErc20(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVisible(
      visible: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateErc20(overrides?: CallOverrides): Promise<[boolean]>;

    "validateErc20()"(overrides?: CallOverrides): Promise<[boolean]>;

    visible(overrides?: CallOverrides): Promise<[boolean]>;

    "visible()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  category(overrides?: CallOverrides): Promise<BigNumber>;

  "category()"(overrides?: CallOverrides): Promise<BigNumber>;

  collectClaim(
    claimHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectClaim(uint256)"(
    claimHash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createClaim(
    timeframe: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createClaim(uint256)"(
    timeframe: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createClaims(
    timeframe: BigNumberish,
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createClaims(uint256,uint256)"(
    timeframe: BigNumberish,
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createERC20Claim(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createERC20Claim(address,uint256)"(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createERC20Claims(
    erc20token: string,
    tokenAmount: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createERC20Claims(address,uint256,uint256)"(
    erc20token: string,
    tokenAmount: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintGenesisGems(
    creator: string,
    funder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintGenesisGems(address,address)"(
    creator: string,
    funder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rescue(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescue(address,uint256)"(
    erc20token: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCategory(
    category: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCategory(uint256)"(
    category: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeTracker(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeTracker(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernor(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernor(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultiToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultiToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapHelper(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwapHelper(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidateErc20(
    arg0: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidateErc20(bool)"(
    arg0: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVisible(
    visible: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVisible(bool)"(
    visible: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateErc20(overrides?: CallOverrides): Promise<boolean>;

  "validateErc20()"(overrides?: CallOverrides): Promise<boolean>;

  visible(overrides?: CallOverrides): Promise<boolean>;

  "visible()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    category(overrides?: CallOverrides): Promise<BigNumber>;

    "category()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCategory(
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTracker(addr: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernor(addr: string, overrides?: CallOverrides): Promise<void>;

    "setGovernor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiToken(token: string, overrides?: CallOverrides): Promise<void>;

    "setMultiToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapHelper(addr: string, overrides?: CallOverrides): Promise<void>;

    "setSwapHelper(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidateErc20(arg0: boolean, overrides?: CallOverrides): Promise<void>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVisible(visible: boolean, overrides?: CallOverrides): Promise<void>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validateErc20(overrides?: CallOverrides): Promise<boolean>;

    "validateErc20()"(overrides?: CallOverrides): Promise<boolean>;

    visible(overrides?: CallOverrides): Promise<boolean>;

    "visible()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    NFTGemClaimCreated(
      account: null,
      pool: null,
      claimHash: null,
      length: null,
      quantity: null,
      amountPaid: null
    ): EventFilter;

    NFTGemClaimRedeemed(
      account: null,
      pool: null,
      claimHash: null,
      amountPaid: null,
      feeAssessed: null
    ): EventFilter;

    NFTGemCreated(
      account: null,
      pool: null,
      claimHash: null,
      gemHash: null,
      quantity: null
    ): EventFilter;

    NFTGemERC20ClaimCreated(
      account: null,
      pool: null,
      claimHash: null,
      length: null,
      token: null,
      quantity: null,
      conversionRate: null
    ): EventFilter;

    NFTGemERC20ClaimRedeemed(
      account: null,
      pool: null,
      claimHash: null,
      token: null,
      ethPrice: null,
      tokenAmount: null,
      feeAssessed: null
    ): EventFilter;
  };

  estimateGas: {
    category(overrides?: CallOverrides): Promise<BigNumber>;

    "category()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeTracker(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernor(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setGovernor(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultiToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "setMultiToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapHelper(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setSwapHelper(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidateErc20(arg0: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVisible(visible: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateErc20(overrides?: CallOverrides): Promise<BigNumber>;

    "validateErc20()"(overrides?: CallOverrides): Promise<BigNumber>;

    visible(overrides?: CallOverrides): Promise<BigNumber>;

    "visible()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    category(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "category()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectClaim(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectClaim(uint256)"(
      claimHash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createClaim(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createClaim(uint256)"(
      timeframe: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createClaims(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createClaims(uint256,uint256)"(
      timeframe: BigNumberish,
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createERC20Claim(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createERC20Claim(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createERC20Claims(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createERC20Claims(address,uint256,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintGenesisGems(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintGenesisGems(address,address)"(
      creator: string,
      funder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rescue(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescue(address,uint256)"(
      erc20token: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeTracker(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTracker(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernor(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernor(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultiToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultiToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapHelper(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapHelper(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidateErc20(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVisible(
      visible: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validateErc20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    visible(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "visible()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
