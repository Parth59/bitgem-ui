/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface INFTComplexGemPoolDataInterface extends ethers.utils.Interface {
  functions: {
    "addAllowedToken(address)": FunctionFragment;
    "addAllowedTokenSource(address)": FunctionFragment;
    "addInputRequirement(address,address,uint8,uint256,uint256,bool,bool)": FunctionFragment;
    "addLegacyToken(address,uint8,uint256,uint256,address,uint256)": FunctionFragment;
    "allInputRequirements(uint256)": FunctionFragment;
    "allInputRequirementsLength()": FunctionFragment;
    "allTokenHashes(uint256)": FunctionFragment;
    "allTokenHashesLength()": FunctionFragment;
    "allowPurchase()": FunctionFragment;
    "allowedTokenSources()": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "allowedTokensLength()": FunctionFragment;
    "category()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimAmount(uint256)": FunctionFragment;
    "claimQuantity(uint256)": FunctionFragment;
    "claimTokenAmount(uint256)": FunctionFragment;
    "claimUnlockTime(uint256)": FunctionFragment;
    "claimedCount()": FunctionFragment;
    "description()": FunctionFragment;
    "enabled()": FunctionFragment;
    "ethPrice()": FunctionFragment;
    "gemClaimHash(uint256)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "maxClaimsPerAccount()": FunctionFragment;
    "maxQuantityPerClaim()": FunctionFragment;
    "mintedCount()": FunctionFragment;
    "nextClaimHash()": FunctionFragment;
    "nextClaimId()": FunctionFragment;
    "nextGemHash()": FunctionFragment;
    "nextGemId()": FunctionFragment;
    "priceIncrementType()": FunctionFragment;
    "removeAllowedToken(address)": FunctionFragment;
    "removeAllowedTokenSource(address)": FunctionFragment;
    "setAllowPurchase(bool)": FunctionFragment;
    "setCategory(uint256)": FunctionFragment;
    "setDescription(string)": FunctionFragment;
    "setEnabled(bool)": FunctionFragment;
    "setMaxClaimsPerAccount(uint256)": FunctionFragment;
    "setMaxQuantityPerClaim(uint256)": FunctionFragment;
    "setNextIds(uint256,uint256)": FunctionFragment;
    "setPriceIncrementType(uint8)": FunctionFragment;
    "setToken(uint256,uint8,uint256)": FunctionFragment;
    "setTokenHashes(uint256[])": FunctionFragment;
    "setValidateErc20(bool)": FunctionFragment;
    "setVisible(bool)": FunctionFragment;
    "settings()": FunctionFragment;
    "stakedToken(uint256)": FunctionFragment;
    "stats()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token(uint256)": FunctionFragment;
    "tokenHashes()": FunctionFragment;
    "tokenId(uint256)": FunctionFragment;
    "tokenType(uint256)": FunctionFragment;
    "totalStakedEth()": FunctionFragment;
    "updateInputRequirement(uint256,address,address,uint8,uint256,uint256,bool,bool)": FunctionFragment;
    "validateErc20()": FunctionFragment;
    "visible()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedTokenSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addInputRequirement",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLegacyToken",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allInputRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allInputRequirementsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenHashesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokenSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "category", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimQuantity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "enabled", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gemClaimHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxClaimsPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxQuantityPerClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextGemHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextGemId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceIncrementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedTokenSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowPurchase",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDescription",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setEnabled", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setMaxClaimsPerAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQuantityPerClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceIncrementType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenHashes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidateErc20",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setVisible", values: [boolean]): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stats", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "tokenHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateInputRequirement",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateErc20",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "visible", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedTokenSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInputRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLegacyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allInputRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allInputRequirementsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenHashesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokenSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "category", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gemClaimHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxClaimsPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxQuantityPerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextGemHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextGemId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceIncrementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedTokenSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxClaimsPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQuantityPerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNextIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceIncrementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidateErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVisible", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInputRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "visible", data: BytesLike): Result;

  events: {};
}

export class INFTComplexGemPoolData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: INFTComplexGemPoolDataInterface;

  functions: {
    addAllowedToken(
      tkn: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAllowedToken(address)"(
      tkn: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addAllowedTokenSource(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addInputRequirement(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addInputRequirement(address,address,uint8,uint256,uint256,bool,bool)"(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLegacyToken(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLegacyToken(address,uint8,uint256,uint256,address,uint256)"(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allInputRequirements(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber, boolean, boolean]
    >;

    "allInputRequirements(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber, boolean, boolean]
    >;

    allInputRequirementsLength(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allInputRequirementsLength()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allTokenHashesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allTokenHashesLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowPurchase(overrides?: CallOverrides): Promise<[boolean]>;

    "allowPurchase()"(overrides?: CallOverrides): Promise<[boolean]>;

    allowedTokenSources(overrides?: Overrides): Promise<ContractTransaction>;

    "allowedTokenSources()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allowedTokensLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    category(overrides?: CallOverrides): Promise<[BigNumber]>;

    "category()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        claimAmount: BigNumber;
        claimQuantity: BigNumber;
        claimUnlockTime: BigNumber;
        claimTokenAmount: BigNumber;
        stakedToken: string;
        nextClaimId: BigNumber;
      }
    >;

    "claim(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        claimAmount: BigNumber;
        claimQuantity: BigNumber;
        claimUnlockTime: BigNumber;
        claimTokenAmount: BigNumber;
        stakedToken: string;
        nextClaimId: BigNumber;
      }
    >;

    claimAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimQuantity(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimQuantity(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimTokenAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimTokenAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimUnlockTime(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimUnlockTime(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimedCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    "description()"(overrides?: CallOverrides): Promise<[string]>;

    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    "enabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    ethPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ethPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    gemClaimHash(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "gemClaimHash(uint256)"(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isTokenAllowed(tkn: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isTokenAllowed(address)"(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxClaimsPerAccount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxClaimsPerAccount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxQuantityPerClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxQuantityPerClaim()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mintedCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextClaimHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextClaimId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextGemHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextGemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextGemId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceIncrementType(overrides?: CallOverrides): Promise<[number]>;

    "priceIncrementType()"(overrides?: CallOverrides): Promise<[number]>;

    removeAllowedToken(
      tkn: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAllowedToken(address)"(
      tkn: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAllowedTokenSource(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAllowPurchase(
      allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowPurchase(bool)"(
      allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDescription(
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDescription(string)"(
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEnabled(
      enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEnabled(bool)"(
      enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxClaimsPerAccount(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxClaimsPerAccount(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxQuantityPerClaim(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxQuantityPerClaim(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNextIds(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNextIds(uint256,uint256)"(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceIncrementType(
      incrementType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceIncrementType(uint8)"(
      incrementType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setToken(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setToken(uint256,uint8,uint256)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenHashes(
      tokenHashes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenHashes(uint256[])"(
      tokenHashes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidateErc20(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVisible(
      visible: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        symbol: string;
        name: string;
        description: string;
        category: BigNumber;
        ethPrice: BigNumber;
        minTime: BigNumber;
        maxTime: BigNumber;
        diffStep: BigNumber;
        macClaims: BigNumber;
        maxQuantityPerClaim: BigNumber;
        maxClaimsPerAccount: BigNumber;
      }
    >;

    "settings()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        symbol: string;
        name: string;
        description: string;
        category: BigNumber;
        ethPrice: BigNumber;
        minTime: BigNumber;
        maxTime: BigNumber;
        diffStep: BigNumber;
        macClaims: BigNumber;
        maxQuantityPerClaim: BigNumber;
        maxClaimsPerAccount: BigNumber;
      }
    >;

    stakedToken(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakedToken(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stats(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        visible: boolean;
        claimedCount: BigNumber;
        mintedCount: BigNumber;
        totalStakedEth: BigNumber;
        nextClaimHash: BigNumber;
        nextGemHash: BigNumber;
        nextClaimId: BigNumber;
        nextGemId: BigNumber;
      }
    >;

    "stats()"(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        visible: boolean;
        claimedCount: BigNumber;
        mintedCount: BigNumber;
        totalStakedEth: BigNumber;
        nextClaimHash: BigNumber;
        nextGemHash: BigNumber;
        nextClaimId: BigNumber;
        nextGemId: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenType: number;
        tokenId: BigNumber;
        tokenSource: string;
      }
    >;

    "token(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenType: number;
        tokenId: BigNumber;
        tokenSource: string;
      }
    >;

    tokenHashes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "tokenHashes()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    totalStakedEth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakedEth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateInputRequirement(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateInputRequirement(uint256,address,address,uint8,uint256,uint256,bool,bool)"(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateErc20(overrides?: CallOverrides): Promise<[boolean]>;

    "validateErc20()"(overrides?: CallOverrides): Promise<[boolean]>;

    visible(overrides?: CallOverrides): Promise<[boolean]>;

    "visible()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  addAllowedToken(
    tkn: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAllowedToken(address)"(
    tkn: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addAllowedTokenSource(
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAllowedTokenSource(address)"(
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addInputRequirement(
    token: string,
    pool: string,
    inputType: BigNumberish,
    tokenId: BigNumberish,
    minAmount: BigNumberish,
    takeCustody: boolean,
    burn: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addInputRequirement(address,address,uint8,uint256,uint256,bool,bool)"(
    token: string,
    pool: string,
    inputType: BigNumberish,
    tokenId: BigNumberish,
    minAmount: BigNumberish,
    takeCustody: boolean,
    burn: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLegacyToken(
    token: string,
    tokenType: BigNumberish,
    tokenHash: BigNumberish,
    tokenId: BigNumberish,
    recipient: string,
    quantity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLegacyToken(address,uint8,uint256,uint256,address,uint256)"(
    token: string,
    tokenType: BigNumberish,
    tokenHash: BigNumberish,
    tokenId: BigNumberish,
    recipient: string,
    quantity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allInputRequirements(
    ndx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, number, BigNumber, BigNumber, boolean, boolean]>;

  "allInputRequirements(uint256)"(
    ndx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, number, BigNumber, BigNumber, boolean, boolean]>;

  allInputRequirementsLength(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allInputRequirementsLength()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allTokenHashes(
    ndx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allTokenHashes(uint256)"(
    ndx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allTokenHashesLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allTokenHashesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowPurchase(overrides?: CallOverrides): Promise<boolean>;

  "allowPurchase()"(overrides?: CallOverrides): Promise<boolean>;

  allowedTokenSources(overrides?: Overrides): Promise<ContractTransaction>;

  "allowedTokenSources()"(overrides?: Overrides): Promise<ContractTransaction>;

  allowedTokens(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allowedTokens(uint256)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allowedTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  category(overrides?: CallOverrides): Promise<BigNumber>;

  "category()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      claimAmount: BigNumber;
      claimQuantity: BigNumber;
      claimUnlockTime: BigNumber;
      claimTokenAmount: BigNumber;
      stakedToken: string;
      nextClaimId: BigNumber;
    }
  >;

  "claim(uint256)"(
    claimHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      claimAmount: BigNumber;
      claimQuantity: BigNumber;
      claimUnlockTime: BigNumber;
      claimTokenAmount: BigNumber;
      stakedToken: string;
      nextClaimId: BigNumber;
    }
  >;

  claimAmount(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimAmount(uint256)"(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimQuantity(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimQuantity(uint256)"(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimTokenAmount(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimTokenAmount(uint256)"(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimUnlockTime(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimUnlockTime(uint256)"(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

  "claimedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  description(overrides?: CallOverrides): Promise<string>;

  "description()"(overrides?: CallOverrides): Promise<string>;

  enabled(overrides?: CallOverrides): Promise<boolean>;

  "enabled()"(overrides?: CallOverrides): Promise<boolean>;

  ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "ethPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  gemClaimHash(
    gemHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "gemClaimHash(uint256)"(
    gemHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTokenAllowed(tkn: string, overrides?: CallOverrides): Promise<boolean>;

  "isTokenAllowed(address)"(
    tkn: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxClaimsPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxClaimsPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxQuantityPerClaim(overrides?: CallOverrides): Promise<BigNumber>;

  "maxQuantityPerClaim()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

  "mintedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextClaimHash(overrides?: CallOverrides): Promise<BigNumber>;

  "nextClaimHash()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextClaimId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextClaimId()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextGemHash(overrides?: CallOverrides): Promise<BigNumber>;

  "nextGemHash()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextGemId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextGemId()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceIncrementType(overrides?: CallOverrides): Promise<number>;

  "priceIncrementType()"(overrides?: CallOverrides): Promise<number>;

  removeAllowedToken(
    tkn: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAllowedToken(address)"(
    tkn: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAllowedTokenSource(
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAllowedTokenSource(address)"(
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAllowPurchase(
    allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowPurchase(bool)"(
    allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCategory(
    category: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCategory(uint256)"(
    category: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDescription(
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDescription(string)"(
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEnabled(
    enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEnabled(bool)"(
    enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxClaimsPerAccount(
    claimId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxClaimsPerAccount(uint256)"(
    claimId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxQuantityPerClaim(
    claimId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxQuantityPerClaim(uint256)"(
    claimId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNextIds(
    nextClaimId: BigNumberish,
    nextGemId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNextIds(uint256,uint256)"(
    nextClaimId: BigNumberish,
    nextGemId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceIncrementType(
    incrementType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceIncrementType(uint8)"(
    incrementType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setToken(
    tokenHash: BigNumberish,
    tokenType: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setToken(uint256,uint8,uint256)"(
    tokenHash: BigNumberish,
    tokenType: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenHashes(
    tokenHashes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenHashes(uint256[])"(
    tokenHashes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidateErc20(
    arg0: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidateErc20(bool)"(
    arg0: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVisible(
    visible: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVisible(bool)"(
    visible: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      symbol: string;
      name: string;
      description: string;
      category: BigNumber;
      ethPrice: BigNumber;
      minTime: BigNumber;
      maxTime: BigNumber;
      diffStep: BigNumber;
      macClaims: BigNumber;
      maxQuantityPerClaim: BigNumber;
      maxClaimsPerAccount: BigNumber;
    }
  >;

  "settings()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      symbol: string;
      name: string;
      description: string;
      category: BigNumber;
      ethPrice: BigNumber;
      minTime: BigNumber;
      maxTime: BigNumber;
      diffStep: BigNumber;
      macClaims: BigNumber;
      maxQuantityPerClaim: BigNumber;
      maxClaimsPerAccount: BigNumber;
    }
  >;

  stakedToken(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "stakedToken(uint256)"(
    claimId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stats(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      visible: boolean;
      claimedCount: BigNumber;
      mintedCount: BigNumber;
      totalStakedEth: BigNumber;
      nextClaimHash: BigNumber;
      nextGemHash: BigNumber;
      nextClaimId: BigNumber;
      nextGemId: BigNumber;
    }
  >;

  "stats()"(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      visible: boolean;
      claimedCount: BigNumber;
      mintedCount: BigNumber;
      totalStakedEth: BigNumber;
      nextClaimHash: BigNumber;
      nextGemHash: BigNumber;
      nextClaimId: BigNumber;
      nextGemId: BigNumber;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string] & {
      tokenType: number;
      tokenId: BigNumber;
      tokenSource: string;
    }
  >;

  "token(uint256)"(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string] & {
      tokenType: number;
      tokenId: BigNumber;
      tokenSource: string;
    }
  >;

  tokenHashes(overrides?: CallOverrides): Promise<BigNumber[]>;

  "tokenHashes()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  tokenId(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenId(uint256)"(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenType(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "tokenType(uint256)"(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  totalStakedEth(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedEth()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateInputRequirement(
    ndx: BigNumberish,
    token: string,
    pool: string,
    inputType: BigNumberish,
    tid: BigNumberish,
    minAmount: BigNumberish,
    takeCustody: boolean,
    burn: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateInputRequirement(uint256,address,address,uint8,uint256,uint256,bool,bool)"(
    ndx: BigNumberish,
    token: string,
    pool: string,
    inputType: BigNumberish,
    tid: BigNumberish,
    minAmount: BigNumberish,
    takeCustody: boolean,
    burn: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateErc20(overrides?: CallOverrides): Promise<boolean>;

  "validateErc20()"(overrides?: CallOverrides): Promise<boolean>;

  visible(overrides?: CallOverrides): Promise<boolean>;

  "visible()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addAllowedToken(tkn: string, overrides?: CallOverrides): Promise<void>;

    "addAllowedToken(address)"(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAllowedTokenSource(
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addInputRequirement(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addInputRequirement(address,address,uint8,uint256,uint256,bool,bool)"(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addLegacyToken(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLegacyToken(address,uint8,uint256,uint256,address,uint256)"(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allInputRequirements(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber, boolean, boolean]
    >;

    "allInputRequirements(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber, boolean, boolean]
    >;

    allInputRequirementsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allInputRequirementsLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokenHashesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allTokenHashesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowPurchase(overrides?: CallOverrides): Promise<boolean>;

    "allowPurchase()"(overrides?: CallOverrides): Promise<boolean>;

    allowedTokenSources(overrides?: CallOverrides): Promise<string[]>;

    "allowedTokenSources()"(overrides?: CallOverrides): Promise<string[]>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    category(overrides?: CallOverrides): Promise<BigNumber>;

    "category()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        claimAmount: BigNumber;
        claimQuantity: BigNumber;
        claimUnlockTime: BigNumber;
        claimTokenAmount: BigNumber;
        stakedToken: string;
        nextClaimId: BigNumber;
      }
    >;

    "claim(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        claimAmount: BigNumber;
        claimQuantity: BigNumber;
        claimUnlockTime: BigNumber;
        claimTokenAmount: BigNumber;
        stakedToken: string;
        nextClaimId: BigNumber;
      }
    >;

    claimAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimQuantity(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimQuantity(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokenAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimTokenAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnlockTime(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimUnlockTime(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<string>;

    "description()"(overrides?: CallOverrides): Promise<string>;

    enabled(overrides?: CallOverrides): Promise<boolean>;

    "enabled()"(overrides?: CallOverrides): Promise<boolean>;

    ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "ethPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    gemClaimHash(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gemClaimHash(uint256)"(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(tkn: string, overrides?: CallOverrides): Promise<boolean>;

    "isTokenAllowed(address)"(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxClaimsPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxClaimsPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxQuantityPerClaim(overrides?: CallOverrides): Promise<BigNumber>;

    "maxQuantityPerClaim()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemId()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceIncrementType(overrides?: CallOverrides): Promise<number>;

    "priceIncrementType()"(overrides?: CallOverrides): Promise<number>;

    removeAllowedToken(tkn: string, overrides?: CallOverrides): Promise<void>;

    "removeAllowedToken(address)"(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAllowedTokenSource(
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowPurchase(allow: boolean, overrides?: CallOverrides): Promise<void>;

    "setAllowPurchase(bool)"(
      allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCategory(
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDescription(
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDescription(string)"(
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnabled(enable: boolean, overrides?: CallOverrides): Promise<void>;

    "setEnabled(bool)"(
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxClaimsPerAccount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxClaimsPerAccount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxQuantityPerClaim(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxQuantityPerClaim(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextIds(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNextIds(uint256,uint256)"(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceIncrementType(
      incrementType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceIncrementType(uint8)"(
      incrementType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setToken(uint256,uint8,uint256)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenHashes(
      tokenHashes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenHashes(uint256[])"(
      tokenHashes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setValidateErc20(arg0: boolean, overrides?: CallOverrides): Promise<void>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVisible(visible: boolean, overrides?: CallOverrides): Promise<void>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        symbol: string;
        name: string;
        description: string;
        category: BigNumber;
        ethPrice: BigNumber;
        minTime: BigNumber;
        maxTime: BigNumber;
        diffStep: BigNumber;
        macClaims: BigNumber;
        maxQuantityPerClaim: BigNumber;
        maxClaimsPerAccount: BigNumber;
      }
    >;

    "settings()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        symbol: string;
        name: string;
        description: string;
        category: BigNumber;
        ethPrice: BigNumber;
        minTime: BigNumber;
        maxTime: BigNumber;
        diffStep: BigNumber;
        macClaims: BigNumber;
        maxQuantityPerClaim: BigNumber;
        maxClaimsPerAccount: BigNumber;
      }
    >;

    stakedToken(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakedToken(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stats(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        visible: boolean;
        claimedCount: BigNumber;
        mintedCount: BigNumber;
        totalStakedEth: BigNumber;
        nextClaimHash: BigNumber;
        nextGemHash: BigNumber;
        nextClaimId: BigNumber;
        nextGemId: BigNumber;
      }
    >;

    "stats()"(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        visible: boolean;
        claimedCount: BigNumber;
        mintedCount: BigNumber;
        totalStakedEth: BigNumber;
        nextClaimHash: BigNumber;
        nextGemHash: BigNumber;
        nextClaimId: BigNumber;
        nextGemId: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenType: number;
        tokenId: BigNumber;
        tokenSource: string;
      }
    >;

    "token(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenType: number;
        tokenId: BigNumber;
        tokenSource: string;
      }
    >;

    tokenHashes(overrides?: CallOverrides): Promise<BigNumber[]>;

    "tokenHashes()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    totalStakedEth(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateInputRequirement(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInputRequirement(uint256,address,address,uint8,uint256,uint256,bool,bool)"(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validateErc20(overrides?: CallOverrides): Promise<boolean>;

    "validateErc20()"(overrides?: CallOverrides): Promise<boolean>;

    visible(overrides?: CallOverrides): Promise<boolean>;

    "visible()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addAllowedToken(tkn: string, overrides?: Overrides): Promise<BigNumber>;

    "addAllowedToken(address)"(
      tkn: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addAllowedTokenSource(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addInputRequirement(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addInputRequirement(address,address,uint8,uint256,uint256,bool,bool)"(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLegacyToken(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLegacyToken(address,uint8,uint256,uint256,address,uint256)"(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allInputRequirements(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allInputRequirements(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allInputRequirementsLength(overrides?: Overrides): Promise<BigNumber>;

    "allInputRequirementsLength()"(overrides?: Overrides): Promise<BigNumber>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokenHashesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allTokenHashesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    "allowPurchase()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokenSources(overrides?: Overrides): Promise<BigNumber>;

    "allowedTokenSources()"(overrides?: Overrides): Promise<BigNumber>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    category(overrides?: CallOverrides): Promise<BigNumber>;

    "category()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claim(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimQuantity(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimQuantity(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokenAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimTokenAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnlockTime(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimUnlockTime(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    "description()"(overrides?: CallOverrides): Promise<BigNumber>;

    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    "enabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "ethPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    gemClaimHash(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gemClaimHash(uint256)"(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(tkn: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isTokenAllowed(address)"(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxClaimsPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxClaimsPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxQuantityPerClaim(overrides?: CallOverrides): Promise<BigNumber>;

    "maxQuantityPerClaim()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemHash(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGemId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGemId()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceIncrementType(overrides?: CallOverrides): Promise<BigNumber>;

    "priceIncrementType()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAllowedToken(tkn: string, overrides?: Overrides): Promise<BigNumber>;

    "removeAllowedToken(address)"(
      tkn: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAllowedTokenSource(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAllowPurchase(allow: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setAllowPurchase(bool)"(
      allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDescription(
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDescription(string)"(
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEnabled(enable: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setEnabled(bool)"(
      enable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxClaimsPerAccount(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxClaimsPerAccount(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxQuantityPerClaim(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxQuantityPerClaim(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNextIds(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNextIds(uint256,uint256)"(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceIncrementType(
      incrementType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceIncrementType(uint8)"(
      incrementType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setToken(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setToken(uint256,uint8,uint256)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenHashes(
      tokenHashes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenHashes(uint256[])"(
      tokenHashes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidateErc20(arg0: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVisible(visible: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    "settings()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakedToken(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedToken(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stats(overrides?: CallOverrides): Promise<BigNumber>;

    "stats()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "token(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenHashes(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenHashes()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakedEth(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateInputRequirement(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateInputRequirement(uint256,address,address,uint8,uint256,uint256,bool,bool)"(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateErc20(overrides?: CallOverrides): Promise<BigNumber>;

    "validateErc20()"(overrides?: CallOverrides): Promise<BigNumber>;

    visible(overrides?: CallOverrides): Promise<BigNumber>;

    "visible()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowedToken(
      tkn: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAllowedToken(address)"(
      tkn: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addAllowedTokenSource(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addInputRequirement(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addInputRequirement(address,address,uint8,uint256,uint256,bool,bool)"(
      token: string,
      pool: string,
      inputType: BigNumberish,
      tokenId: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLegacyToken(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLegacyToken(address,uint8,uint256,uint256,address,uint256)"(
      token: string,
      tokenType: BigNumberish,
      tokenHash: BigNumberish,
      tokenId: BigNumberish,
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allInputRequirements(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allInputRequirements(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allInputRequirementsLength(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allInputRequirementsLength()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allTokenHashes(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allTokenHashes(uint256)"(
      ndx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allTokenHashesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allTokenHashesLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowPurchase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allowPurchase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedTokenSources(overrides?: Overrides): Promise<PopulatedTransaction>;

    "allowedTokenSources()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedTokens(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedTokensLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    category(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "category()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      claimHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimQuantity(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimQuantity(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokenAmount(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimTokenAmount(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimUnlockTime(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimUnlockTime(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimedCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "description()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "enabled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gemClaimHash(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gemClaimHash(uint256)"(
      gemHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenAllowed(address)"(
      tkn: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxClaimsPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxClaimsPerAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxQuantityPerClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxQuantityPerClaim()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintedCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextClaimHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextClaimHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextClaimId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextClaimId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextGemHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextGemHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextGemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextGemId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceIncrementType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceIncrementType()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedToken(
      tkn: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAllowedToken(address)"(
      tkn: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAllowedTokenSource(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAllowedTokenSource(address)"(
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAllowPurchase(
      allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowPurchase(bool)"(
      allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCategory(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCategory(uint256)"(
      category: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDescription(
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDescription(string)"(
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEnabled(
      enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEnabled(bool)"(
      enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxClaimsPerAccount(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxClaimsPerAccount(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxQuantityPerClaim(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxQuantityPerClaim(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNextIds(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNextIds(uint256,uint256)"(
      nextClaimId: BigNumberish,
      nextGemId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceIncrementType(
      incrementType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceIncrementType(uint8)"(
      incrementType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setToken(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setToken(uint256,uint8,uint256)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenHashes(
      tokenHashes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenHashes(uint256[])"(
      tokenHashes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidateErc20(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidateErc20(bool)"(
      arg0: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVisible(
      visible: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVisible(bool)"(
      visible: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settings()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedToken(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedToken(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stats()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "token(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenHashes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenId(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenType(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenType(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakedEth()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateInputRequirement(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateInputRequirement(uint256,address,address,uint8,uint256,uint256,bool,bool)"(
      ndx: BigNumberish,
      token: string,
      pool: string,
      inputType: BigNumberish,
      tid: BigNumberish,
      minAmount: BigNumberish,
      takeCustody: boolean,
      burn: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateErc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validateErc20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    visible(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "visible()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
