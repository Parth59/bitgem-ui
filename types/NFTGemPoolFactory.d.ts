/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTGemPoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addController(address)": FunctionFragment;
    "allNFTGemPools(uint256)": FunctionFragment;
    "allNFTGemPoolsLength()": FunctionFragment;
    "createCustomNFTGemPool(bytes,string,string)": FunctionFragment;
    "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "getNFTGemPool(uint256)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "relinquishControl()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allNFTGemPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allNFTGemPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCustomNFTGemPool",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTGemPool",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTGemPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "relinquishControl",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allNFTGemPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allNFTGemPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCustomNFTGemPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTGemPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTGemPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relinquishControl",
    data: BytesLike
  ): Result;

  events: {
    "ControllerAdded(address,address)": EventFragment;
    "ControllerRemoved(address,address)": EventFragment;
    "CustomNFTGemPoolCreated(string,string)": EventFragment;
    "NFTGemPoolCreated(string,string,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CustomNFTGemPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTGemPoolCreated"): EventFragment;
}

export class NFTGemPoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTGemPoolFactoryInterface;

  functions: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allNFTGemPools(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { gemPool: string }>;

    "allNFTGemPools(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { gemPool: string }>;

    allNFTGemPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allNFTGemPoolsLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCustomNFTGemPool(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createCustomNFTGemPool(bytes,string,string)"(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createNFTGemPool(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getNFTGemPool(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { gemPool: string }>;

    "getNFTGemPool(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { gemPool: string }>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    relinquishControl(overrides?: CallOverrides): Promise<[void]>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<[void]>;
  };

  addController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allNFTGemPools(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allNFTGemPools(uint256)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allNFTGemPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allNFTGemPoolsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  createCustomNFTGemPool(
    bytecode: BytesLike,
    gemSymbol: string,
    gemName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createCustomNFTGemPool(bytes,string,string)"(
    bytecode: BytesLike,
    gemSymbol: string,
    gemName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createNFTGemPool(
    gemSymbol: string,
    gemName: string,
    ethPrice: BigNumberish,
    minTime: BigNumberish,
    maxTime: BigNumberish,
    diffstep: BigNumberish,
    maxMint: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
    gemSymbol: string,
    gemName: string,
    ethPrice: BigNumberish,
    minTime: BigNumberish,
    maxTime: BigNumberish,
    diffstep: BigNumberish,
    maxMint: BigNumberish,
    allowedToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getNFTGemPool(
    _symbolHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getNFTGemPool(uint256)"(
    _symbolHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isController(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  relinquishControl(overrides?: CallOverrides): Promise<void>;

  "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    addController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allNFTGemPools(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "allNFTGemPools(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allNFTGemPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allNFTGemPoolsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    createCustomNFTGemPool(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createCustomNFTGemPool(bytes,string,string)"(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createNFTGemPool(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTGemPool(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getNFTGemPool(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    relinquishControl(overrides?: CallOverrides): Promise<void>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ControllerAdded(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    ControllerRemoved(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    CustomNFTGemPoolCreated(gemSymbol: null, gemName: null): EventFilter;

    NFTGemPoolCreated(
      gemSymbol: null,
      gemName: null,
      ethPrice: null,
      mintTime: null,
      maxTime: null,
      diffstep: null,
      maxMint: null,
      allowedToken: null
    ): EventFilter;
  };

  estimateGas: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allNFTGemPools(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allNFTGemPools(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allNFTGemPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allNFTGemPoolsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    createCustomNFTGemPool(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createCustomNFTGemPool(bytes,string,string)"(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createNFTGemPool(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getNFTGemPool(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNFTGemPool(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relinquishControl(overrides?: CallOverrides): Promise<BigNumber>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allNFTGemPools(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allNFTGemPools(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allNFTGemPoolsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allNFTGemPoolsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCustomNFTGemPool(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createCustomNFTGemPool(bytes,string,string)"(
      bytecode: BytesLike,
      gemSymbol: string,
      gemName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createNFTGemPool(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)"(
      gemSymbol: string,
      gemName: string,
      ethPrice: BigNumberish,
      minTime: BigNumberish,
      maxTime: BigNumberish,
      diffstep: BigNumberish,
      maxMint: BigNumberish,
      allowedToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getNFTGemPool(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNFTGemPool(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relinquishControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relinquishControl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
