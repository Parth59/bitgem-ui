/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IERC20GemTokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "allItems(uint256)": FunctionFragment;
    "allItemsLength()": FunctionFragment;
    "createItem(string,string,address,address,uint8,address)": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "items()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allItemsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createItem",
    values: [string, string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "items", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allItemsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;

  events: {
    "ERC20GemTokenCreated(address,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20GemTokenCreated"): EventFragment;
}

export class IERC20GemTokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IERC20GemTokenFactoryInterface;

  functions: {
    allItems(idx: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "allItems(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allItemsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allItemsLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    createItem(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createItem(string,string,address,address,uint8,address)"(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getItem(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getItem(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    items(overrides?: CallOverrides): Promise<[string[]]>;

    "items()"(overrides?: CallOverrides): Promise<[string[]]>;
  };

  allItems(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allItems(uint256)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allItemsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allItemsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  createItem(
    tokenSymbol: string,
    tokenName: string,
    poolAddress: string,
    tokenAddress: string,
    decimals: BigNumberish,
    feeManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createItem(string,string,address,address,uint8,address)"(
    tokenSymbol: string,
    tokenName: string,
    poolAddress: string,
    tokenAddress: string,
    decimals: BigNumberish,
    feeManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getItem(
    _symbolHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getItem(uint256)"(
    _symbolHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  items(overrides?: CallOverrides): Promise<string[]>;

  "items()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    allItems(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "allItems(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allItemsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allItemsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    createItem(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createItem(string,string,address,address,uint8,address)"(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getItem(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getItem(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    items(overrides?: CallOverrides): Promise<string[]>;

    "items()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    ERC20GemTokenCreated(
      tokenAddress: null,
      poolAddress: null,
      tokenSymbol: null,
      poolSymbol: null
    ): EventFilter;
  };

  estimateGas: {
    allItems(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "allItems(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allItemsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allItemsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    createItem(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createItem(string,string,address,address,uint8,address)"(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getItem(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getItem(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(overrides?: CallOverrides): Promise<BigNumber>;

    "items()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allItems(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allItems(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allItemsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allItemsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createItem(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createItem(string,string,address,address,uint8,address)"(
      tokenSymbol: string,
      tokenName: string,
      poolAddress: string,
      tokenAddress: string,
      decimals: BigNumberish,
      feeManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getItem(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getItem(uint256)"(
      _symbolHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "items()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
