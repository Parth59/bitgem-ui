/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTGemMultiTokenInterface extends ethers.utils.Interface {
  functions: {
    "addController(address)": FunctionFragment;
    "addProxyRegistry(address)": FunctionFragment;
    "allHeldTokens(address,uint256)": FunctionFragment;
    "allHeldTokensLength(address)": FunctionFragment;
    "allProxyRegistries(uint256)": FunctionFragment;
    "allProxyRegistriesLength()": FunctionFragment;
    "allTokenHolders(uint256,uint256)": FunctionFragment;
    "allTokenHoldersLength(uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "getRegistryManager()": FunctionFragment;
    "getTokenData(uint256)": FunctionFragment;
    "heldTokens(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "lock(uint256,uint256)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "paused()": FunctionFragment;
    "relinquishControl()": FunctionFragment;
    "removeProxyRegistryAt(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setRegistryManager(address)": FunctionFragment;
    "setTokenData(uint256,uint8,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenHolders(uint256)": FunctionFragment;
    "totalBalances(uint256)": FunctionFragment;
    "unlockTime(address,uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProxyRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allHeldTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allHeldTokensLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allProxyRegistries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allProxyRegistriesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenHolders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenHoldersLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistryManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "heldTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relinquishControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeProxyRegistryAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistryManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenData",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProxyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allHeldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allHeldTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allProxyRegistries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allProxyRegistriesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenHoldersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heldTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relinquishControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProxyRegistryAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ControllerAdded(address,address)": EventFragment;
    "ControllerRemoved(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class NFTGemMultiToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTGemMultiTokenInterface;

  functions: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addProxyRegistry(
      registry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addProxyRegistry(address)"(
      registry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allHeldTokens(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allHeldTokens(address,uint256)"(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allHeldTokensLength(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allHeldTokensLength(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allProxyRegistries(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "allProxyRegistries(uint256)"(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allProxyRegistriesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allProxyRegistriesLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allTokenHolders(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "allTokenHolders(uint256,uint256)"(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allTokenHoldersLength(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allTokenHoldersLength(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burn(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRegistryManager(overrides?: CallOverrides): Promise<[string]>;

    "getRegistryManager()"(overrides?: CallOverrides): Promise<[string]>;

    getTokenData(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { tokenType: number; tokenPool: string }>;

    "getTokenData(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { tokenType: number; tokenPool: string }>;

    heldTokens(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "heldTokens(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    lock(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lock(uint256,uint256)"(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    relinquishControl(overrides?: CallOverrides): Promise<[void]>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<[void]>;

    removeProxyRegistryAt(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeProxyRegistryAt(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistryManager(
      newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistryManager(address)"(
      newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenData(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenData(uint256,uint8,address)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenHolders(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "tokenHolders(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    totalBalances(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalBalances(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockTime(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { theTime: BigNumber }>;

    "unlockTime(address,uint256)"(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { theTime: BigNumber }>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "uri(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addProxyRegistry(
    registry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addProxyRegistry(address)"(
    registry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allHeldTokens(
    holder: string,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allHeldTokens(address,uint256)"(
    holder: string,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allHeldTokensLength(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allHeldTokensLength(address)"(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allProxyRegistries(
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "allProxyRegistries(uint256)"(
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allProxyRegistriesLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allProxyRegistriesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  allTokenHolders(
    _token: BigNumberish,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "allTokenHolders(uint256,uint256)"(
    _token: BigNumberish,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allTokenHoldersLength(
    _token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allTokenHoldersLength(uint256)"(
    _token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    account: string,
    tokenHash: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256,uint256)"(
    account: string,
    tokenHash: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRegistryManager(overrides?: CallOverrides): Promise<string>;

  "getRegistryManager()"(overrides?: CallOverrides): Promise<string>;

  getTokenData(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string] & { tokenType: number; tokenPool: string }>;

  "getTokenData(uint256)"(
    tokenHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string] & { tokenType: number; tokenPool: string }>;

  heldTokens(holder: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "heldTokens(address)"(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isController(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    token: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lock(uint256,uint256)"(
    token: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    account: string,
    tokenHash: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256)"(
    account: string,
    tokenHash: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  relinquishControl(overrides?: CallOverrides): Promise<void>;

  "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

  removeProxyRegistryAt(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeProxyRegistryAt(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistryManager(
    newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistryManager(address)"(
    newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenData(
    tokenHash: BigNumberish,
    tokenType: BigNumberish,
    tokenPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenData(uint256,uint8,address)"(
    tokenHash: BigNumberish,
    tokenType: BigNumberish,
    tokenPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenHolders(
    _token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "tokenHolders(uint256)"(
    _token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  totalBalances(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalBalances(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockTime(
    account: string,
    token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "unlockTime(address,uint256)"(
    account: string,
    token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProxyRegistry(
      registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addProxyRegistry(address)"(
      registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allHeldTokens(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allHeldTokens(address,uint256)"(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allHeldTokensLength(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allHeldTokensLength(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allProxyRegistries(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "allProxyRegistries(uint256)"(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allProxyRegistriesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allProxyRegistriesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    allTokenHolders(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "allTokenHolders(uint256,uint256)"(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allTokenHoldersLength(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHoldersLength(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRegistryManager(overrides?: CallOverrides): Promise<string>;

    "getRegistryManager()"(overrides?: CallOverrides): Promise<string>;

    getTokenData(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { tokenType: number; tokenPool: string }>;

    "getTokenData(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { tokenType: number; tokenPool: string }>;

    heldTokens(holder: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "heldTokens(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isController(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lock(uint256,uint256)"(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    relinquishControl(overrides?: CallOverrides): Promise<void>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<void>;

    removeProxyRegistryAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeProxyRegistryAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistryManager(
      newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRegistryManager(address)"(
      newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenData(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenData(uint256,uint8,address)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenHolders(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "tokenHolders(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    totalBalances(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBalances(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockTime(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockTime(address,uint256)"(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    ControllerAdded(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    ControllerRemoved(
      contractAddress: string | null,
      controllerAddress: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addProxyRegistry(
      registry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addProxyRegistry(address)"(
      registry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allHeldTokens(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allHeldTokens(address,uint256)"(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allHeldTokensLength(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allHeldTokensLength(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allProxyRegistries(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allProxyRegistries(uint256)"(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allProxyRegistriesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allProxyRegistriesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    allTokenHolders(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHolders(uint256,uint256)"(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokenHoldersLength(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allTokenHoldersLength(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRegistryManager(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegistryManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenData(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenData(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTokens(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    "heldTokens(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lock(uint256,uint256)"(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    relinquishControl(overrides?: CallOverrides): Promise<BigNumber>;

    "relinquishControl()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeProxyRegistryAt(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeProxyRegistryAt(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistryManager(
      newManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRegistryManager(address)"(
      newManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenData(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenData(uint256,uint8,address)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenHolders(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenHolders(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalances(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBalances(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockTime(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockTime(address,uint256)"(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addProxyRegistry(
      registry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addProxyRegistry(address)"(
      registry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allHeldTokens(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allHeldTokens(address,uint256)"(
      holder: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allHeldTokensLength(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allHeldTokensLength(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allProxyRegistries(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allProxyRegistries(uint256)"(
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allProxyRegistriesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allProxyRegistriesLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allTokenHolders(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allTokenHolders(uint256,uint256)"(
      _token: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allTokenHoldersLength(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allTokenHoldersLength(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRegistryManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegistryManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenData(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenData(uint256)"(
      tokenHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heldTokens(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "heldTokens(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isController(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lock(uint256,uint256)"(
      token: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256)"(
      account: string,
      tokenHash: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relinquishControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relinquishControl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeProxyRegistryAt(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeProxyRegistryAt(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistryManager(
      newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistryManager(address)"(
      newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenData(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenData(uint256,uint8,address)"(
      tokenHash: BigNumberish,
      tokenType: BigNumberish,
      tokenPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenHolders(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenHolders(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalances(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBalances(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTime(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockTime(address,uint256)"(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
