/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WrappedTokenLibInterface extends ethers.utils.Interface {
  functions: {
    "getPoolTypeBalance(address,address,uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPoolTypeBalance",
    values: [string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolTypeBalance",
    data: BytesLike
  ): Result;

  events: {
    "Unwrap(address,uint256)": EventFragment;
    "Wrap(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Unwrap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Wrap"): EventFragment;
}

export class WrappedTokenLib extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WrappedTokenLibInterface;

  functions: {
    getPoolTypeBalance(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tq: BigNumber }>;

    "getPoolTypeBalance(address,address,uint8,address)"(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tq: BigNumber }>;
  };

  getPoolTypeBalance(
    erc1155token: string,
    tokenPool: string,
    tokenType: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPoolTypeBalance(address,address,uint8,address)"(
    erc1155token: string,
    tokenPool: string,
    tokenType: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getPoolTypeBalance(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolTypeBalance(address,address,uint8,address)"(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Unwrap(account: string | null, quantity: null): EventFilter;

    Wrap(account: string | null, quantity: null): EventFilter;
  };

  estimateGas: {
    getPoolTypeBalance(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolTypeBalance(address,address,uint8,address)"(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPoolTypeBalance(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolTypeBalance(address,address,uint8,address)"(
      erc1155token: string,
      tokenPool: string,
      tokenType: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
